<UserControl x:Class="KLib.WPF.TreeGrid"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:l="clr-namespace:KLib.WPF"
             xmlns:s='clr-namespace:System;assembly=mscorlib' 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                            <Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
                                <Path.Data>
                                    <PathGeometry Figures="M0,0L0,6L6,0z" />
                                </Path.Data>
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="UIElement.IsMouseOver">
                                <Setter Property="Shape.Stroke" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <SolidColorBrush>#FF1BBBFA</SolidColorBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Shape.Fill" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <SolidColorBrush>#00FFFFFF</SolidColorBrush>
                                    </Setter.Value>
                                </Setter>
                                <Trigger.Value>
                                    <s:Boolean>True</s:Boolean>
                                </Trigger.Value>
                            </Trigger>
                            <Trigger Property="ToggleButton.IsChecked">
                                <Setter Property="UIElement.RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Shape.Fill" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <SolidColorBrush>#FF595959</SolidColorBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Shape.Stroke" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <SolidColorBrush>#FF262626</SolidColorBrush>
                                    </Setter.Value>
                                </Setter>
                                <Trigger.Value>
                                    <s:Boolean>True</s:Boolean>
                                </Trigger.Value>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <l:LevelToIndentConverter x:Key="LevelToIndentConverter"/>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <l:ObjectToVisibilityConverter x:Key="ObjectToVisibilityConverter" />

        <DataTemplate x:Key="CellTemplate_Name">
            <DockPanel>
                <ToggleButton x:Name="Expander" 
                      Style="{StaticResource ExpandCollapseToggleStyle}" 
                      Margin="{Binding Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type l:TreeListViewItem}}}"
                      IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource AncestorType={x:Type l:TreeListViewItem}}}"
                      ClickMode="Press"/>
                <ContentControl Content="{Binding LeftSide}" ContentTemplateSelector="{StaticResource InspectValueCellTemplateSelector}" HorizontalAlignment="Stretch" />
            </DockPanel>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=HasItems,
                               RelativeSource={RelativeSource 
                               AncestorType={x:Type l:TreeListViewItem}}}" 
                     Value="False">
                    <Setter TargetName="Expander"
                  Property="Visibility"
                  Value="Hidden"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate x:Key="CellTemplate_Value">
            <ContentControl Content="{Binding RightSide}" ContentTemplateSelector="{StaticResource InspectValueCellTemplateSelector}" HorizontalAlignment="Stretch" />
        </DataTemplate>

        <GridViewColumnCollection x:Key="GridViewColumns">
            <GridViewColumn CellTemplate="{StaticResource CellTemplate_Name}" Width="200" />
            <GridViewColumn DisplayMemberBinding="{Binding Type}" Width="60" />
            <GridViewColumn CellTemplate="{StaticResource CellTemplate_Value}" Width="300"/>
        </GridViewColumnCollection>

        <Style TargetType="{x:Type l:TreeListViewItem}">
            <Setter Property="IsExpanded" Value="{Binding IsExpanded, FallbackValue=False}" />
            <Setter Property="ItemsSource" Value="{Binding Items}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type l:TreeListViewItem}">
                        <StackPanel>
                            <Border Name="ItemBorder" Background="{TemplateBinding Background}"
                              BorderThickness="0" Padding="{TemplateBinding Padding}">
                                <GridViewRowPresenter x:Name="PART_Header" Content="{TemplateBinding Header}" Columns="{StaticResource GridViewColumns}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Width" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Height" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                            </MultiTrigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource  {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="false"/>
                                    <Condition SourceName="PART_Header" Property="IsMouseOver" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ContextMenu">
                <Setter.Value>
                    <ContextMenu ItemsSource="{Binding Commands}">
                        <ContextMenu.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Command" Value="{Binding Command}" />
                                <Setter Property="Icon">
                                    <Setter.Value>
                                        <Image Width="16" Height="16" Visibility="{Binding Image, Converter={StaticResource ObjectToVisibilityConverter}}" Source="{Binding Image}" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Header" Value="{Binding Header}" />
                            </Style>
                        </ContextMenu.ItemContainerStyle>
                    </ContextMenu>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type l:TreeListView}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type l:TreeListView}">
                        <DockPanel>
                            <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility ="Disabled" l:ScrollSynchronizer.ScrollGroup="Group1">
                                <DockPanel>
                                    <Border Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" DockPanel.Dock="Right" 
                                            Visibility="{Binding ElementName=TheScrollViewer, Path=ComputedVerticalScrollBarVisibility, FallbackValue=Collapsed}" />
                                    <GridViewHeaderRowPresenter Columns="{StaticResource GridViewColumns}"/>
                                </DockPanel>
                            </ScrollViewer>
                            <ScrollViewer CanContentScroll="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" 
                                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                          Background="{TemplateBinding Panel.Background}" Padding="{TemplateBinding Control.Padding}" 
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Focusable="False"
                                          l:ScrollSynchronizer.ScrollGroup="Group1" x:Name="TheScrollViewer">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>
        <l:TreeListView ItemsSource="{Binding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" />
    </Grid>
</UserControl>
